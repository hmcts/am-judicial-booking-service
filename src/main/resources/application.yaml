server:
  port: ${PORT:4097}

management:
  endpoints:
    web:
      exposure:
        include: health,info,data-extract
      base-path: /
  endpoint:
    health:
      show-details: always
      enabled: true
  health:
    db:
      enabled: false

security:
  anonymousPaths:
    - "/"
    - "/health/**"
    - "/health/liveness"
    - "/loggers/**"
    - "/swagger"
    - "/swagger-ui.html"
    - "/swagger-resources/**"
    - "/swagger-ui/**"
    - "/v3/api-docs/**"
    - "/v3/**"
    - "/search/**"
    - "/csrf"
    - "/error"
    - "/favicon.ico"
    - "/status/health"
    - "/welcome"
  authorisedRoles:
  authorisedServices: ${AM_JUDICIAL_BOOKING_S2S_AUTHORISED_SERVICES:am_judicial_booking_service}

spring:
  application:
    name: Judicial Booking Service
  config:
    import: "optional:configtree:/mnt/secrets/am/"
  main:
    allow-bean-definition-overriding: true
    allow-circular-references: true
  jackson:
    default-property-inclusion: NON_NULL
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    log_statement: all
    properties:
      hibernate:
        jdbc:
          time_zone: UTC
          lob:
            non_contextual_creation: true
  flyway.enabled: ${ENABLE_DB_MIGRATE:true}
  flyway.locations: classpath:db/migration
  datasource:
    url: jdbc:postgresql://${JUDICIAL_BOOKING_SERVICE_POSTGRES_HOST:localhost}:${JUDICIAL_BOOKING_SERVICE_POSTGRES_PORT:5451}/${JUDICIAL_BOOKING_SERVICE_POSTGRES_DATABASE:judicial_booking}${JUDICIAL_BOOKING_SERVICE_DB_OPTIONS:}
    username: ${JUDICIAL_BOOKING_SERVICE_POSTGRES_USER:am}
    password: ${JUDICIAL_BOOKING_SERVICE_POSTGRES_PASS:am}
    properties:
      charSet: UTFh-8
    hikari:
      maximumPoolSize: ${MAX_POOL_SIZE:8}
      poolName: AMHikariCP
      connectionTimeout: ${CONNECTION_TIMEOUT:50000}
      keepAliveTime: ${KEEP_ALIVE_TIME:60000}
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${OPEN_ID_API_BASE_URI:https://idam-web-public.aat.platform.hmcts.net/o}
        registration:
          oidc:
            client-id: microservicekey-am-judicial-booking-service
            client-secret: ${AM_JUDICIAL_BOOKING_SERVICE_SECRET:AAAAAAAAAAAAAAAA}
  cache:
    type: ${ENABLE_CACHE:}
    cache-names: token
    caffeine:
      spec: maximumSize=50,expireAfterWrite=120s
### dependency configuration
auth.provider.service.client.baseUrl: ${IDAM_S2S_URL:http://localhost:4502}
idam:
  s2s-auth:
    # AAAAAAAAAAAAAAAA
    totp_secret: ${AM_JUDICIAL_BOOKING_SERVICE_SECRET:AAAAAAAAAAAAAAAA}
    microservice: am_judicial_booking_service
    url: ${IDAM_S2S_URL:http://localhost:4502}
  s2s-authorised:
    services: ${AM_JUDICIAL_BOOKING_S2S_AUTHORISED_SERVICES:am_judicial_booking_service,am_org_role_mapping_service,xui_webapp}
  api.url: ${IDAM_USER_URL:http://localhost:5000}
  client:
    id: ${JUDICIAL_BOOKING_IDAM_CLIENT_ID:am_docker}
    secret: ${JUDICIAL_BOOKING_IDAM_CLIENT_SECRET:am_docker_secret}
    redirect_uri: ${JUDICIAL_BOOKING_IDAM_REDIRECT_URI:http://localhost:4096/oauth2redirect}
    admin:
      userId: ${JUDICIAL_BOOKING_IDAM_ADMIN_USERID:}
      secret: ${JUDICIAL_BOOKING_IDAM_ADMIN_PASSWORD:}
      scope: ${JUDICIAL_BOOKING_IDAM_ADMIN_SCOPE:openid profile roles authorities}

auth.idam.client.baseUrl: ${IDAM_USER_URL:http://localhost:5000}
integrationTest:
  api:
    url: "/"

judicialBookingUrl: ${TEST_URL:http://localhost:4097}


judicial-booking:
  query:
    bypass-userid-validation-for-services: am_org_role_mapping_service

logging:
  level:
    root: DEBUG
    uk:
      gov:
        hmcts: ${APPLICATION_LOGGING_LEVEL:INFO}

springdoc:
  swagger-ui:
    enabled: true
    operationsSorter: method
  writer-with-order-by-keys: true


