#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('17 07 * * 1-5')]),
  parameters([
          string(name: 'URL_TO_TEST', defaultValue: 'http://am-judicial-booking-service-aat.service.core-compute-aat.internal',
                  description: 'The URL you want to run these tests against'),
          string(name: 'SecurityRules',
                  defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
                  description: 'The URL you want to run these tests against'),
  ])
])

@Library("Infrastructure")

def type = "java"
def product = "am"
def component = "judicial-booking-service"

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def vaultOverrides = [
  'preview' : 'aat',
  'spreview': 'saat'
]

def secrets = [
    's2s-${env}': [
            secret('microservicekey-am-judicial-booking-service', 'BEFTA_S2S_CLIENT_SECRET'),
            secret('microservicekey-am-judicial-booking-service', 'AM_JUDICIAL_BOOKING_SERVICE_SECRET'),
            secret('microservicekey-am-org-role-mapping-service', 'BEFTA_S2S_CLIENT_SECRET_OF_AM_ORG_ROLE_MAPPING_SERVICE'),
            secret('microservicekey-xui-webapp', 'BEFTA_S2S_CLIENT_SECRET_OF_XUI_WEBAPP')
    ],
    'am-${env}': [
            secret('role-assignment-service-IDAM-CLIENT-SECRET', 'JUDICIAL_BOOKING_IDAM_CLIENT_SECRET'),
            secret('test-am-user1-befta-pwd', 'TEST_AM_USER1_BEFTA_PWD'),
            secret('test-am-user2-befta-pwd', 'TEST_AM_USER2_BEFTA_PWD'),
            secret('test-am-user3-befta-pwd', 'TEST_AM_USER3_BEFTA_PWD'),
            secret('role-assignment-service-IDAM-CLIENT-SECRET', 'OAUTH2_CLIENT_SECRET')
    ]
]
withNightlyPipeline(type, product, component) {

// Vars needed for functional and smoke tests to run against AKS
  env.TEST_URL = "http://am-judicial-booking-service-aat.service.core-compute-aat.internal"
  env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
  env.IDAM_API_URL_BASE = "https://idam-api.aat.platform.hmcts.net"
  env.IDAM_S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  env.DEFINITION_STORE_HOST = "http://ccd-definition-store-api-aat.service.core-compute-aat.internal"
  env.DEFINITION_STORE_URL_BASE = "http://ccd-definition-store-api-aat.service.core-compute-aat.internal"
  env.BEFTA_S2S_CLIENT_ID = "am_judicial_booking_service"
  env.BEFTA_S2S_CLIENT_ID_OF_AM_ORG_ROLE_MAPPING_SERVICE = "am_org_role_mapping_service"
  env.BEFTA_S2S_CLIENT_ID_OF_XUI_WEBAPP = "xui_webapp"
  env.BEFTA_RETRY_MAX_ATTEMPTS = "3"
  env.BEFTA_RETRY_STATUS_CODES = "502,503,504"
  env.BEFTA_RETRY_MAX_DELAY = "1000"
  env.BEFTA_RETRY_NON_RETRYABLE_HTTP_METHODS = "POST,PUT"
  env.OAUTH2_CLIENT_ID = "am_role_assignment"
  env.JUDICIAL_BOOKING_IDAM_CLIENT_ID = "am_role_assignment"
  env.OAUTH2_REDIRECT_URI = "http://am-role-assignment-service-aat.service.core-compute-aat.internal/oauth2redirect"
  env.OAUTH2_ACCESS_TOKEN_TYPE = "OIDC"
  env.BEFTA_RESPONSE_HEADER_CHECK_POLICY = "JUST_WARN"
  env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  env.OAUTH2_SCOPE_VARIABLES = "openid%20profile%20roles%20authorities"
  env.IDAM_CLIENT_ID="am_role_assignment"
  env.OPENID_SCOPE_VARIABLES = "openid+profile+roles+authorities"
  env.MICROSERVICE_NAME = "am_judicial_booking_service"

// Vars for Kubernetes PACT
  env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
  env.PACT_BROKER_URL = "pact-broker.platform.hmcts.net"
  env.PACT_BROKER_PORT = "443"
  env.PACT_BROKER_SCHEME = "https"

  // Vars for Azure Container Registries DTSAM-370
  env.TESTCONTAINERS_HOST_OVERRIDE="localhost"
  env.TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX="hmctspublic.azurecr.io/imported/"

  enableMutationTest()
  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)

  enableSecurityScan()
  enableFullFunctionalTest()
  enableFortifyScan()

  before('fullFunctionalTest') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/integration/**/*'
  }

  afterSuccess('build') {
    stage("integration tests") {
      sh "./gradlew integration"
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/integration/**/*'
    }
  }

  afterAlways('fullFunctionalTest') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/cucumber/**/*'

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "target/cucumber/functional-html-reports",
            reportFiles          : "overview-features.html,overview-failures.html,",
            reportTitles         : "Features,Failures",
            reportName           : "Functional Test Report"
    ]
  }

  afterAlways('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
  }
}
