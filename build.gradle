plugins {
    id 'idea'
    id 'application'
    id 'uk.gov.hmcts.java' version '0.12.65'
    id 'pmd'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.boot' version '3.3.13'
    id 'info.solidsoft.pitest' version '1.15.0'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'org.sonarqube' version '6.0.1.5171'
    id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.25'
    id 'au.com.dius.pact' version '4.6.17'
    id 'org.owasp.dependencycheck' version '12.0.0'
    id 'org.flywaydb.flyway' version '9.22.3'
    id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.16'
}

ext {
    springCloudVersion = '2023.0.5'
}

def versions = [
        pitest             : '1.17.0',
        lombok             : '1.18.38',
        reformLogging      : '6.1.9',
        reformS2sClient    : '5.3.2',
        serenity           : '4.2.16',
        pact_version       : '4.1.7',
        rest_assured       : '5.5.5',
        cucumber           : '5.7.0',
        feign_jackson      : '13.5',
        jacksondata        : '2.18.3',
        befta              : '9.2.4'
]

mainClassName = 'uk.gov.hmcts.reform.judicialbooking.JudicialBookingApplication'
def jarName = 'am-judicial-booking-service.jar'

pmd {
    toolVersion = '6.55.0'
    sourceSets = []
}

group = 'uk.gov.hmcts.reform.judicialbooking'
version = '0.0.1'

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
        }
    }
}

configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
    cucumberRuntime.extendsFrom(functionalRuntime)
    contractTestCompile.extendsFrom testCompile
    contractTestRuntime.extendsFrom testRuntime
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

idea {
    module {
        // config to allow Intelij to mark test source and resource files correctly to help linting tools
        testSources.from(java.sourceSets.functionalTest.java.srcDirs)
        testSources.from(java.sourceSets.integrationTest.java.srcDirs)
        testSources.from(java.sourceSets.smokeTest.java.srcDirs)
        testSources.from(java.sourceSets.contractTest.java.srcDirs)
        testResources.from(java.sourceSets.functionalTest.resources.srcDirs)
        testResources.from(java.sourceSets.integrationTest.resources.srcDirs)
        testResources.from(java.sourceSets.smokeTest.resources.srcDirs)
        testResources.from(java.sourceSets.contractTest.resources.srcDirs)
    }
}

project.ext {
    pacticipant = 'accessMgmt_judicialBooking'
    if (System.env.GIT_COMMIT) {
        // DTSAM-379 canIDeploy Index 0 out of bounds for length 0 Issue
        pacticipantVersion = System.env.GIT_COMMIT.substring(0,9)
    } else {
        // DTSAM-382 GIT_COMMIT null in local build fix
        pacticipantVersion = getCheckedOutGitCommitHash()
    }
}

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task functional(type: JavaExec) {
    description = "Runs the functional tests"
    group = "Verification"

    generateCucumberReports.enabled = false
    main("uk.gov.hmcts.reform.judicialbooking.befta.JudicialBookingAmBeftaMain")
    classpath += configurations.cucumberRuntime + sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
    args = ['--strict',  '--tags', 'not @Ignore',
            '--plugin', "json:${rootDir}/target/cucumber.json", '--plugin', "junit:${buildDir}/test-results/functional/cucumber.xml",
            '--glue', 'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features'
    ]
    // '--add-opens=...' added to suppress 'WARNING: An illegal reflective access operation has occurred' in uk.gov.hmcts.befta.util.CucumberStepAnnotationUtils
    jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'

    // Configure array order in FTAs
    environment "DEFAULT_COLLECTION_ASSERTION_MODE", "UNORDERED"

    finalizedBy {
        generateCucumberReports.enabled = true
        generateCucumberReports {
            doLast{
                def functionalReportsFolder = "${rootDir}/target/cucumber/functional-html-reports/"
                delete functionalReportsFolder
                new File(functionalReportsFolder).mkdirs()
                file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file(functionalReportsFolder))
                logger.quiet("Functional test report moved to ---> file://$functionalReportsFolder/overview-features.html")
            }
        }
    }

    outputs.upToDateWhen { false }
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    serenity.outputDirectory = file("${projectDir}/integrationTest/site/reports")
    finalizedBy aggregate
}
check.dependsOn integration

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    useJUnitPlatform()
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
    finalizedBy aggregate
}

task fortifyScan(type: JavaExec)  {
    main("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
    // The line below prevents the build from failing if the Fortify scan detects issues
    ignoreExitValue(true)
}

task contract(type: Test) {
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include "uk/gov/hmcts/reform/orgrolemapping/**"
    systemProperty 'pact.rootDir', "pacts"
}

task runAndPublishConsumerPactTests(type: Test, description: 'Publish pact test to broker.', group: 'Verification') {
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include "uk/gov/hmcts/reform/judicialbooking/**"
    include "uk/gov/hmcts/reform/orgrolemapping/**"
    systemProperty 'pact.rootDir', "pacts"
}

pact {
    broker {
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:9292'
    }
    publish {
        pactDirectory = 'pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:9292'
        version = project.pacticipantVersion
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    }
}

pactPublish {
    pactPublish = project.pact.publish
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

task runProviderPactVerification(type: Test) {
    useJUnitPlatform()
    logger.lifecycle("Runs provider pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    if (project.hasProperty('pact.verifier.publishResults')) {
        systemProperty 'pact.verifier.publishResults', project.property('pact.verifier.publishResults')
    }
    systemProperty 'pact.provider.version', project.pacticipantVersion
    include "uk/gov/hmcts/reform/judicialbooking/**"
}

runProviderPactVerification.dependsOn contract
runProviderPactVerification.finalizedBy pactVerify

jacocoTestReport {
    executionData(test)
    reports {
        xml.required = true
        csv.required = false
        xml.outputLocation = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

jacoco {
    toolVersion = "0.8.13"
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    baselineOnMigrate = true
    outOfOrder = true
    if (project.hasProperty("dburl")) {
        url = "jdbc:postgresql://${dburl}"
    }
}

pitest {
    pitestVersion = versions.pitest
    targetClasses = ['uk.gov.hmcts.reform.*']
    excludedClasses = ['uk.gov.hmcts.reform.judicialbooking.JudicialBookingApplication',
                       'uk.gov.hmcts.reform.judicialbooking.util.Swagger2SpringBoot',
                       'uk.gov.hmcts.reform.judicialbooking.config.*',
                       'uk.gov.hmcts.reform.judicialbooking.controller.advice.ErrorConstants',
                       'uk.gov.hmcts.reform.judicialbooking.configuration.*',
                       'uk.gov.hmcts.reform.judicialbooking.apihelper.*',
                       'uk.gov.hmcts.reform.judicialbooking.model.*',
                       'uk.gov.hmcts.reform.judicialbooking.util.Swagger2SpringBoot$ExitException']
    threads = 15
    outputFormats = ['XML', 'HTML']
    timestampedReports = true
    mutationThreshold = 40
}


sonarqube {
    properties {
        property "sonar.projectName", "tempered:am-judicial-booking-service"
        property "sonar.projectKey", "tempered:am-judicial-booking-service"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
        property "sonar.exclusions",
                "src/main/java/uk/gov/hmcts/reform/judicialbooking/*Application.java," +
                "src/main/java/uk/gov/hmcts/reform/judicialbooking/util/*Swagger2SpringBoot.java," +
                "src/main/java/uk/gov/hmcts/reform/judicialbooking/controller/advice/*ErrorConstants.java," +
                "src/main/java/uk/gov/hmcts/reform/judicialbooking/controller/advice/exception/**," +
                "src/main/java/uk/gov/hmcts/reform/judicialbooking/config/**," +
                "src/main/java/uk/gov/hmcts/reform/judicialbooking/model/enums/**," +
                "src/main/java/uk/gov/hmcts/reform/judicialbooking/apihelper/**"
        property "sonar.junit.reportPaths", "${project.buildDir}/test-results/junit-platform"
    }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all {
            def isNonStable = { String version ->
                ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                    version ==~ /(?i).*[.-]\$qualifier[.\\d-+]*/
                }
            }
            if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                selection.reject('Release candidate')
            }
        }
    }
}


//https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
    }
}

tasks.named('integration') {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}


dependencies {
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-web')
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa')
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-actuator')
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-security')
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
    implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation group: 'org.springframework.retry', name: 'spring-retry', version: '2.0.11'

    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'

    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.11.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.18.0'
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '8.5.13'
    implementation group: 'com.google.guava', name: 'guava', version: '33.4.6-jre'
    implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'
    implementation group: 'jakarta.el', name: 'jakarta.el-api', version: '6.0.1'
    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.2.0'
    implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: '6.6.5.Final'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.5'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksondata
    implementation group: 'com.fasterxml.jackson', name: 'jackson-bom', version: versions.jacksondata, ext: 'pom'
    implementation group: 'com.nimbusds', name: 'lang-tag', version: '1.7'
    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '10.0.1'
    implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'

    //Added for S2S and User Authentication
    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.reformS2sClient
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.12.0'
    implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.3'
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging

    implementation group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: '2.6.4'
    implementation group: 'io.projectreactor', name: 'reactor-core', version: '3.7.4'
    implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.2'
    implementation group: 'commons-lang', name: 'commons-lang', version: '2.6'
    implementation group: 'com.auth0', name: 'java-jwt', version: '4.4.0'

    implementation 'net.bytebuddy:byte-buddy:1.14.19'

    testImplementation('org.springframework.cloud:spring-cloud-contract-wiremock')
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation('com.opentable.components:otj-pg-embedded:1.1.0')
    testImplementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.17'

    testImplementation 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'
    testImplementation group: 'io.cucumber', name: 'cucumber-java', version: versions.cucumber
    testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: versions.cucumber
    testImplementation group: 'io.cucumber', name: 'cucumber-core', version: versions.cucumber
    testImplementation group: 'io.cucumber', name: 'cucumber-spring', version: versions.cucumber
    testImplementation group: 'io.cucumber', name: 'cucumber-junit-platform-engine', version: versions.cucumber
    testImplementation group: 'org.junit.platform', name: 'junit-platform-suite-api', version: '1.10.0'
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.rest_assured
    testImplementation group: 'io.github.openfeign', name: 'feign-jackson', version: versions.feign_jackson
    testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-junit5', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    testImplementation(group: 'com.github.hmcts', name: 'befta-fw', version: versions.befta) {
        exclude group: 'com.github.hmcts', module: 'service-auth-provider-java-client'
    }
    testImplementation 'com.github.hmcts:fortify-client:1.4.9:all'

    smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit5', version: versions.serenity
    smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    smokeTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    smokeTestImplementation('com.opentable.components:otj-pg-embedded:1.1.0')
    smokeTestImplementation(group: 'com.github.hmcts', name: 'befta-fw', version: versions.befta) {
        exclude group: 'com.github.hmcts', module: 'service-auth-provider-java-client'
    }
    smokeTestImplementation 'com.github.hmcts:fortify-client:1.4.9:all'
    smokeTestImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksondata
    smokeTestImplementation group: 'com.fasterxml.jackson', name: 'jackson-bom', version: versions.jacksondata, ext: 'pom'

    // AM-467-Serenity report for Integration test
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit5', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.rest_assured

    implementation group: 'org.pitest', name: 'pitest-junit5-plugin', version: '1.2.2'

    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    smokeTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    smokeTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version

    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath

    functionalTestImplementation sourceSets.main.runtimeClasspath
    functionalTestImplementation sourceSets.test.runtimeClasspath

    smokeTestImplementation sourceSets.main.runtimeClasspath

    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath

}

test {
    generateCucumberReports.enabled = false
    useJUnitPlatform()
    failFast = true
}

bootJar {
    archiveFileName = jarName

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}


dependencyManagement {
    dependencies {
        dependencySet(group: 'com.fasterxml.jackson.core', version: versions.jacksondata) {
            entry 'jackson-databind'
            entry 'jackson-core'
            entry 'jackson-annotations'
        }
    }

    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.3.13"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations.all {
    exclude group: "org.glassfish", module: "jakarta.el"
    exclude group: 'io.github.x-stream', module: 'mxparser'
    exclude group: 'io.netty', module: 'netty-tcnative-classes'
    exclude group: 'org.codehaus.groovy', module: 'groovy'
    exclude group: 'org.codehaus.groovy', module: 'groovy-xml'
    exclude group: 'org.codehaus.groovy', module: 'groovy-json'
    exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
}

cucumberReports {
    outputDir = file("${projectDir}/target/cucumber")
    reports = files("${projectDir}/target/cucumber.json")
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
    duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
    duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
    duplicatesStrategy = 'include'
}

rootProject.tasks.named("processContractTestResources") {
    duplicatesStrategy = 'include'
}
